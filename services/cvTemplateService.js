const fs = require('fs');
const path = require('path');

class CVTemplateService {
  constructor() {
    this.templates = {
      'cfm-branded': {
        id: 'cfm-branded',
        name: 'CFM Branded Template',
        description: 'Professional template with Captain Cary branding, watermarks, and company details',
        features: ['Company branding', 'Watermark protection', 'Professional layout', 'Contact information'],
        color: '#3B82F6',
        category: 'professional'
      },
      'minimal': {
        id: 'minimal',
        name: 'Minimal Template',
        description: 'Clean and simple design without branding',
        features: ['Clean layout', 'No branding', 'Simple format', 'Easy to read'],
        color: '#6B7280',
        category: 'simple'
      },
      'modern': {
        id: 'modern',
        name: 'Modern Template',
        description: 'Contemporary design with colors and modern styling',
        features: ['Modern styling', 'Color accents', 'Professional look', 'Contemporary layout'],
        color: '#10B981',
        category: 'modern'
      },
      'executive': {
        id: 'executive',
        name: 'Executive Template',
        description: 'High-level executive format with premium styling',
        features: ['Executive layout', 'Premium styling', 'Professional headers', 'Detailed sections'],
        color: '#8B5CF6',
        category: 'executive'
      },
      'technical': {
        id: 'technical',
        name: 'Technical Template',
        description: 'Technical format optimized for engineering and technical roles',
        features: ['Technical sections', 'Skills matrix', 'Project details', 'Certifications'],
        color: '#F59E0B',
        category: 'technical'
      }
    };
  }

  getTemplates() {
    return Object.values(this.templates);
  }

  getTemplate(templateId) {
    return this.templates[templateId];
  }

  generateCV(crew, templateId = 'cfm-branded', options = {}) {
    const template = this.getTemplate(templateId);
    if (!template) {
      throw new Error('Template not found');
    }

    const {
      includeLogo = true,
      addWatermark = true,
      includeContactInfo = true,
      includeCompanyDetails = true
    } = options;

    let rtfContent = '';

    switch (templateId) {
      case 'cfm-branded':
        rtfContent = this.generateCFMBrandedCV(crew, options);
        break;
      case 'minimal':
        rtfContent = this.generateMinimalCV(crew, options);
        break;
      case 'modern':
        rtfContent = this.generateModernCV(crew, options);
        break;
      case 'executive':
        rtfContent = this.generateExecutiveCV(crew, options);
        break;
      case 'technical':
        rtfContent = this.generateTechnicalCV(crew, options);
        break;
      default:
        rtfContent = this.generateCFMBrandedCV(crew, options);
    }

    return Buffer.from(rtfContent, 'utf8');
  }

  generateCFMBrandedCV(crew, options) {
    const { addWatermark = true, includeLogo = true, includeContactInfo = true } = options;
    
    return `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}{\\f1 Arial;}{\\f2 Calibri;}}
{\\colortbl;\\red0\\green0\\blue0;\\red0\\green0\\blue255;\\red255\\green0\\blue0;\\red59\\green130\\blue246;}
\\f0\\fs24
${addWatermark ? '{\\b\\fs16\\cf2 CAPTAIN CARY - CONFIDENTIAL DOCUMENT\\par}\\par' : ''}
{\\b\\fs32\\cf2 CURRICULUM VITAE\\par}
{\\b\\fs20\\cf2 CAPTAIN CARY MARITIME SERVICES\\par}
\\par
{\\b\\fs24 Personal Information\\par}
{\\b Name:} ${crew.fullName}\\par
{\\b Email:} ${crew.email}\\par
{\\b Phone:} ${crew.phone}\\par
{\\b Rank:} ${crew.rank}\\par
{\\b Nationality:} ${crew.nationality}\\par
{\\b Current Location:} ${crew.currentLocation}\\par
{\\b Date of Birth:} ${new Date(crew.dateOfBirth).toLocaleDateString()}\\par
{\\b Availability Date:} ${new Date(crew.availabilityDate).toLocaleDateString()}\\par
\\par
{\\b\\fs24 Professional Information\\par}
${crew.seaTimeSummary ? `{\\b Experience:}\\par ${crew.seaTimeSummary}\\par\\par` : ''}
${crew.preferredVesselType ? `{\\b Preferred Vessel Type:} ${crew.preferredVesselType}\\par` : ''}
${crew.additionalNotes ? `{\\b Additional Notes:}\\par ${crew.additionalNotes}\\par` : ''}
\\par
${includeContactInfo ? '{\\b\\fs20\\cf2 Captain Cary Maritime Services\\par}{\\b\\fs16\\cf2 Professional Crew Management Solutions\\par}{\\b\\fs14\\cf2 Email: info@captaincary.com | Phone: +1-234-567-8900\\par}{\\b\\fs14\\cf2 Website: www.captaincary.com\\par}' : ''}
${addWatermark ? '\\par{\\b\\fs12\\cf3 Document generated by Captain Cary System on ' + new Date().toLocaleString() + '\\par}' : ''}
}`;
  }

  generateMinimalCV(crew, options) {
    return `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}}
{\\colortbl;\\red0\\green0\\blue0;}
\\f0\\fs24
{\\b\\fs28 CURRICULUM VITAE\\par}
\\par
{\\b Name:} ${crew.fullName}\\par
{\\b Email:} ${crew.email}\\par
{\\b Phone:} ${crew.phone}\\par
{\\b Rank:} ${crew.rank}\\par
{\\b Nationality:} ${crew.nationality}\\par
{\\b Current Location:} ${crew.currentLocation}\\par
{\\b Date of Birth:} ${new Date(crew.dateOfBirth).toLocaleDateString()}\\par
{\\b Availability Date:} ${new Date(crew.availabilityDate).toLocaleDateString()}\\par
\\par
${crew.seaTimeSummary ? `{\\b Experience:}\\par ${crew.seaTimeSummary}\\par\\par` : ''}
${crew.preferredVesselType ? `{\\b Preferred Vessel Type:} ${crew.preferredVesselType}\\par` : ''}
${crew.additionalNotes ? `{\\b Additional Notes:}\\par ${crew.additionalNotes}\\par` : ''}
}`;
  }

  generateModernCV(crew, options) {
    return `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Calibri;}{\\f1 Arial;}}
{\\colortbl;\\red0\\green0\\blue0;\\red0\\green0\\blue255;\\red16\\green185\\blue129;}
\\f0\\fs24
{\\b\\fs36\\cf2 CURRICULUM VITAE\\par}
{\\b\\fs28\\cf2 ${crew.fullName}\\par}
{\\b\\fs20\\cf2 ${crew.rank}\\par}
\\par
{\\b\\fs24\\cf2 Personal Details\\par}
{\\b Email:} ${crew.email}\\par
{\\b Phone:} ${crew.phone}\\par
{\\b Nationality:} ${crew.nationality}\\par
{\\b Current Location:} ${crew.currentLocation}\\par
{\\b Date of Birth:} ${new Date(crew.dateOfBirth).toLocaleDateString()}\\par
{\\b Availability Date:} ${new Date(crew.availabilityDate).toLocaleDateString()}\\par
\\par
{\\b\\fs24\\cf2 Professional Experience\\par}
${crew.seaTimeSummary ? `${crew.seaTimeSummary}\\par\\par` : ''}
${crew.preferredVesselType ? `{\\b Vessel Type Preference:} ${crew.preferredVesselType}\\par` : ''}
${crew.additionalNotes ? `{\\b Additional Information:}\\par ${crew.additionalNotes}\\par` : ''}
\\par
{\\b\\fs20\\cf2 Captain Cary Maritime Services\\par}
{\\b\\fs16\\cf2 Professional Crew Management Solutions\\par}
}`;
  }

  generateExecutiveCV(crew, options) {
    return `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}{\\f1 Arial;}}
{\\colortbl;\\red0\\green0\\blue0;\\red0\\green0\\blue255;\\red139\\green92\\blue246;}
\\f0\\fs24
{\\b\\fs40\\cf2 CURRICULUM VITAE\\par}
{\\b\\fs32\\cf2 ${crew.fullName}\\par}
{\\b\\fs24\\cf2 ${crew.rank}\\par}
\\par
{\\b\\fs28\\cf2 EXECUTIVE SUMMARY\\par}
{\\b\\fs20 Professional maritime officer with extensive experience in ${crew.rank} position.\\par}
\\par
{\\b\\fs28\\cf2 PERSONAL INFORMATION\\par}
{\\b Name:} ${crew.fullName}\\par
{\\b Email:} ${crew.email}\\par
{\\b Phone:} ${crew.phone}\\par
{\\b Rank:} ${crew.rank}\\par
{\\b Nationality:} ${crew.nationality}\\par
{\\b Current Location:} ${crew.currentLocation}\\par
{\\b Date of Birth:} ${new Date(crew.dateOfBirth).toLocaleDateString()}\\par
{\\b Availability Date:} ${new Date(crew.availabilityDate).toLocaleDateString()}\\par
\\par
{\\b\\fs28\\cf2 PROFESSIONAL EXPERIENCE\\par}
${crew.seaTimeSummary ? `${crew.seaTimeSummary}\\par\\par` : ''}
${crew.preferredVesselType ? `{\\b Vessel Type Preference:} ${crew.preferredVesselType}\\par` : ''}
${crew.additionalNotes ? `{\\b Additional Information:}\\par ${crew.additionalNotes}\\par` : ''}
\\par
{\\b\\fs24\\cf2 Captain Cary Maritime Services\\par}
{\\b\\fs20\\cf2 Executive Crew Management Solutions\\par}
}`;
  }

  generateTechnicalCV(crew, options) {
    return `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Consolas;}{\\f1 Arial;}}
{\\colortbl;\\red0\\green0\\blue0;\\red0\\green0\\blue255;\\red245\\green158\\blue11;}
\\f0\\fs24
{\\b\\fs32\\cf2 TECHNICAL CURRICULUM VITAE\\par}
{\\b\\fs24\\cf2 ${crew.fullName} - ${crew.rank}\\par}
\\par
{\\b\\fs24\\cf2 TECHNICAL PROFILE\\par}
{\\b Name:} ${crew.fullName}\\par
{\\b Email:} ${crew.email}\\par
{\\b Phone:} ${crew.phone}\\par
{\\b Rank:} ${crew.rank}\\par
{\\b Nationality:} ${crew.nationality}\\par
{\\b Current Location:} ${crew.currentLocation}\\par
{\\b Date of Birth:} ${new Date(crew.dateOfBirth).toLocaleDateString()}\\par
{\\b Availability Date:} ${new Date(crew.availabilityDate).toLocaleDateString()}\\par
\\par
{\\b\\fs24\\cf2 TECHNICAL EXPERIENCE\\par}
${crew.seaTimeSummary ? `${crew.seaTimeSummary}\\par\\par` : ''}
${crew.preferredVesselType ? `{\\b Vessel Type Specialization:} ${crew.preferredVesselType}\\par` : ''}
${crew.additionalNotes ? `{\\b Technical Notes:}\\par ${crew.additionalNotes}\\par` : ''}
\\par
{\\b\\fs20\\cf2 Captain Cary Maritime Services\\par}
{\\b\\fs16\\cf2 Technical Crew Management Solutions\\par}
}`;
  }

  // Generate actual Word document (.docx)
  async generateWordDocument(crew, options = {}) {
    const {
      template = 'cfm-branded',
      includeLogo = true,
      addWatermark = true
    } = options;

    // For now, we'll use the RTF format as it's compatible with Word
    // In a production environment, you would use a library like 'docx' to create actual .docx files
    const rtfContent = this.generateCV(crew, template, options);
    
    // Convert RTF to a buffer that can be sent as a Word document
    return rtfContent;
  }
}

module.exports = new CVTemplateService();
